{"ast":null,"code":"var _jsxFileName = \"/Users/kevinescarmant/Desktop/DotCms/demo/src/ExtraCredit.js\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport NavigationBar from './components/NavigationBar';\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/client';\nimport { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst httpLink = createHttpLink({\n  uri: 'https://demo.dotcms.com/api/v1/graphql'\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = localStorage.getItem('token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\"\n    }\n  };\n});\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\nfunction ExtraCredit() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [token, setToken] = useState();\n  const [navigationData, setNavigationData] = useState();\n  useEffect(() => {\n    const fetchToken = async () => {\n      const url = 'https://demo.dotcms.com/api/v1/authentication/api-token';\n      try {\n        const response = await fetch(url, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            user: 'admin@dotcms.com',\n            password: 'admin',\n            expirationDays: 10\n          })\n        });\n        const data = await response.json();\n        if (response.ok) {\n          console.log('Token:', data);\n          setToken(data);\n          return;\n        } else {\n          console.error('Error:', data);\n          alert('could not get token');\n        }\n      } catch (error) {\n        console.error('Fetch error:', error);\n      }\n    };\n    fetchToken();\n  }, []);\n  const fetchToken = async () => {\n    const url = 'https://demo.dotcms.com/api/v1/authentication/api-token';\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user: 'admin@dotcms.com',\n          password: 'admin',\n          expirationDays: 10\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        console.log('Token:', data);\n        setToken(data);\n        return;\n      } else {\n        console.error('Error:', data);\n        alert('could not get token');\n      }\n    } catch (error) {\n      console.error('Fetch error:', error);\n    }\n  };\n  const GET_DATA = gql`\n    query PageAPI {\n        page(url: \"/index\") {\n            title\n            url\n            seodescription\n            titleImage{\n            name\n            }\n            host {\n            hostName\n            }\n            layout {\n            header\n            footer\n            body {\n                rows {\n                columns {\n                    containers {\n                    identifier\n                    uuid\n                    }\n                }\n                }\n            }\n            }\n        }\n        }\n    `;\n  const DataComponent = () => {\n    _s();\n    const {\n      loading,\n      error,\n      data\n    } = useQuery(GET_DATA);\n    if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 29\n    }, this);\n    if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 27\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.data.map(item => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: item.name\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }, this);\n  };\n  _s(DataComponent, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n    return [useQuery];\n  });\n  const fetchNavItems = async () => {\n    try {\n      //await fetchToken()\n      const url = 'https://demo.dotcms.com/api/v1/nav/?depth=2';\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token.entity.token}`\n        }\n      });\n      const data = await response.json();\n      if (response.ok) {\n        console.log('Navigation Data:', data);\n        setNavigationData(data);\n      } else {\n        console.error('Error fetching data:', data);\n      }\n    } catch (error) {\n      console.error('Fetch error:', error);\n    }\n  };\n  useEffect(() => {\n    fetchNavItems();\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" TOKEN \", token !== undefined && token.entity.token, /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"NAV BAR using API routing to external pages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(NavigationBar, {\n      navigationData: navigationData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(DataComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n}\n_s2(ExtraCredit, \"7O5VO7jizTg7v2a3qNElrbZK3qQ=\");\n_c = ExtraCredit;\nexport default ExtraCredit;\nvar _c;\n$RefreshReg$(_c, \"ExtraCredit\");","map":{"version":3,"names":["React","useEffect","useState","NavigationBar","gql","useQuery","ApolloClient","InMemoryCache","ApolloProvider","createHttpLink","setContext","jsxDEV","_jsxDEV","httpLink","uri","authLink","_","headers","token","localStorage","getItem","authorization","client","link","concat","cache","ExtraCredit","_s2","_s","$RefreshSig$","setToken","navigationData","setNavigationData","fetchToken","url","response","fetch","method","body","JSON","stringify","user","password","expirationDays","data","json","ok","console","log","error","alert","GET_DATA","DataComponent","loading","children","fileName","_jsxFileName","lineNumber","columnNumber","message","map","item","name","id","fetchNavItems","entity","undefined","_c","$RefreshReg$"],"sources":["/Users/kevinescarmant/Desktop/DotCms/demo/src/ExtraCredit.js"],"sourcesContent":["import React , {useEffect ,useState} from 'react'\nimport NavigationBar from './components/NavigationBar';\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/client';import { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink } from '@apollo/client';\n\nimport { setContext } from '@apollo/client/link/context';\n\n\nconst httpLink = createHttpLink({\n  uri: 'https://demo.dotcms.com/api/v1/graphql', \n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('token'); \n\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\n\n\n\nfunction ExtraCredit() {\n    const [token,setToken] = useState()\n    const [navigationData,setNavigationData] = useState()\n    useEffect(() => {\n        const fetchToken = async () => {\n        const url = 'https://demo.dotcms.com/api/v1/authentication/api-token';\n\n        try {\n            const response = await fetch(url, {\n            method: 'POST', \n            headers: {\n                'Content-Type': 'application/json'            \n            },\n            body: JSON.stringify({\n                user: 'admin@dotcms.com',\n                password: 'admin',\n                expirationDays: 10,\n            }),\n            });\n\n            const data = await response.json();\n\n            if (response.ok) {\n                console.log('Token:', data);\n                setToken(data)\n                return\n            } else {\n                console.error('Error:', data);\n                alert('could not get token')\n            }\n        } catch (error) {\n            console.error('Fetch error:', error);\n        }\n        };\n\n        fetchToken();\n    }, []);\n\n    const fetchToken = async () => {\n        const url = 'https://demo.dotcms.com/api/v1/authentication/api-token';\n\n        try {\n            const response = await fetch(url, {\n            method: 'POST', \n            headers: {\n                'Content-Type': 'application/json'            \n            },\n            body: JSON.stringify({\n                user: 'admin@dotcms.com',\n                password: 'admin',\n                expirationDays: 10,\n            }),\n            });\n\n            const data = await response.json();\n\n            if (response.ok) {\n                console.log('Token:', data);\n                setToken(data)\n                return\n            } else {\n                console.error('Error:', data);\n                alert('could not get token')\n            }\n        } catch (error) {\n            console.error('Fetch error:', error);\n        }\n    };\n\n    const GET_DATA=gql`\n    query PageAPI {\n        page(url: \"/index\") {\n            title\n            url\n            seodescription\n            titleImage{\n            name\n            }\n            host {\n            hostName\n            }\n            layout {\n            header\n            footer\n            body {\n                rows {\n                columns {\n                    containers {\n                    identifier\n                    uuid\n                    }\n                }\n                }\n            }\n            }\n        }\n        }\n    `\n\n    const DataComponent = () => {\n        const { loading, error, data } = useQuery(GET_DATA);\n      \n        if (loading) return <p>Loading...</p>;\n        if (error) return <p>Error: {error.message}</p>;\n      \n        return (\n          <div>\n            {data.data.map(item => (\n              <p key={item.id}>{item.name}</p>\n            ))}\n          </div>\n        );\n      };\n      \n\n    const fetchNavItems = async () => {\n        \n      try {\n        //await fetchToken()\n        const url = 'https://demo.dotcms.com/api/v1/nav/?depth=2';\n        const response = await fetch(url, {\n          method: 'GET', \n          headers: {\n            'Authorization':`Bearer ${token.entity.token}`\n        }\n        });\n\n        const data = await response.json();\n\n        if (response.ok) {\n          console.log('Navigation Data:', data);\n          setNavigationData(data)\n        } else {\n          console.error('Error fetching data:', data);\n        }\n      } catch (error) {\n        console.error('Fetch error:', error);\n      }\n    };\n    useEffect(() => {\n\n    fetchNavItems();\n    \n    }, [token])\n    \n\n\n        \n    \n\n\n  return (\n    <div> TOKEN { token !== undefined && token.entity.token}\n    { /* navigationData !== undefined && navigationData.entity.children */}\n    <p>NAV BAR using API routing to external pages</p>\n    <NavigationBar navigationData={navigationData}/>\n    <DataComponent/>\n    </div>\n  )\n}\n\nexport default ExtraCredit"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}